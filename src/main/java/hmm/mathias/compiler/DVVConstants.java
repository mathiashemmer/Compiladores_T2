/* Generated By:JavaCC: Do not edit this line. DVVConstants.java */
package hmm.mathias.compiler;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DVVConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMENTARIO_LINHA = 6;
  /** RegularExpression Id. */
  int COMENTARIO_BLOCO = 7;
  /** RegularExpression Id. */
  int PROGRAM = 8;
  /** RegularExpression Id. */
  int DEFINE = 9;
  /** RegularExpression Id. */
  int NOT = 10;
  /** RegularExpression Id. */
  int VARIABLE = 11;
  /** RegularExpression Id. */
  int IS = 12;
  /** RegularExpression Id. */
  int NATURAL = 13;
  /** RegularExpression Id. */
  int REAL = 14;
  /** RegularExpression Id. */
  int CHAR = 15;
  /** RegularExpression Id. */
  int BOOLEAN = 16;
  /** RegularExpression Id. */
  int EXECUTE = 17;
  /** RegularExpression Id. */
  int GET = 18;
  /** RegularExpression Id. */
  int PUT = 19;
  /** RegularExpression Id. */
  int LOOP = 20;
  /** RegularExpression Id. */
  int WHILE = 21;
  /** RegularExpression Id. */
  int TRUE = 22;
  /** RegularExpression Id. */
  int FALSE = 23;
  /** RegularExpression Id. */
  int DO = 24;
  /** RegularExpression Id. */
  int TO = 25;
  /** RegularExpression Id. */
  int SET = 26;
  /** RegularExpression Id. */
  int VERIFY = 27;
  /** RegularExpression Id. */
  int LPAREN = 28;
  /** RegularExpression Id. */
  int RPAREN = 29;
  /** RegularExpression Id. */
  int LCOL = 30;
  /** RegularExpression Id. */
  int RCOL = 31;
  /** RegularExpression Id. */
  int LCHAVE = 32;
  /** RegularExpression Id. */
  int RCHAVE = 33;
  /** RegularExpression Id. */
  int PONTOVIRGULA = 34;
  /** RegularExpression Id. */
  int VIRGULA = 35;
  /** RegularExpression Id. */
  int PONTO = 36;
  /** RegularExpression Id. */
  int MENORIGUAL = 37;
  /** RegularExpression Id. */
  int EXCLAMACAO = 38;
  /** RegularExpression Id. */
  int MAIS = 39;
  /** RegularExpression Id. */
  int MENOS = 40;
  /** RegularExpression Id. */
  int ASTERISCO = 41;
  /** RegularExpression Id. */
  int MAIORIGUAL = 42;
  /** RegularExpression Id. */
  int BARRA = 43;
  /** RegularExpression Id. */
  int POTENCIA = 44;
  /** RegularExpression Id. */
  int DIVISAOINTEIRA = 45;
  /** RegularExpression Id. */
  int RESTODIVISAO = 46;
  /** RegularExpression Id. */
  int LOGICOE = 47;
  /** RegularExpression Id. */
  int LOGICOOU = 48;
  /** RegularExpression Id. */
  int IGUALDADE = 49;
  /** RegularExpression Id. */
  int DIFERENCA = 50;
  /** RegularExpression Id. */
  int MAIORQUE = 51;
  /** RegularExpression Id. */
  int MENORQUE = 52;
  /** RegularExpression Id. */
  int COMENTARIOINICIO = 53;
  /** RegularExpression Id. */
  int DECIMAL_LITERARL = 54;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 55;
  /** RegularExpression Id. */
  int EXPONENT = 56;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 57;
  /** RegularExpression Id. */
  int STRING_LITERAL = 58;
  /** RegularExpression Id. */
  int IDENTIFIER = 59;
  /** RegularExpression Id. */
  int LETTER = 60;
  /** RegularExpression Id. */
  int DIGIT = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\n\\r\"",
    "\"\\t\"",
    "\"\\f\"",
    "<COMENTARIO_LINHA>",
    "<COMENTARIO_BLOCO>",
    "\"program\"",
    "\"define\"",
    "\"not\"",
    "\"variable\"",
    "\"is\"",
    "\"natural\"",
    "\"real\"",
    "\"char\"",
    "\"boolean\"",
    "\"execute\"",
    "\"get\"",
    "\"put\"",
    "\"loop\"",
    "\"while\"",
    "\"true\"",
    "\"false\"",
    "\"do\"",
    "\"to\"",
    "\"set\"",
    "\"verify\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"<=\"",
    "\"!\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\">=\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%$\"",
    "\"&\"",
    "\"|\"",
    "\"==\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\":-\"",
    "<DECIMAL_LITERARL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"\\n\"",
  };

}
